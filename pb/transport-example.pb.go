// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport-example.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	transport-example.proto

It has these top-level messages:
	Request
	UppercaseResponse
	CountResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Input string `protobuf:"bytes,1,opt,name=Input" json:"Input,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type UppercaseResponse struct {
	Output string `protobuf:"bytes,1,opt,name=Output" json:"Output,omitempty"`
	Err    string `protobuf:"bytes,2,opt,name=Err" json:"Err,omitempty"`
}

func (m *UppercaseResponse) Reset()                    { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string            { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()               {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UppercaseResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *UppercaseResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type CountResponse struct {
	Output int64 `protobuf:"varint,1,opt,name=Output" json:"Output,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CountResponse) GetOutput() int64 {
	if m != nil {
		return m.Output
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*UppercaseResponse)(nil), "pb.UppercaseResponse")
	proto.RegisterType((*CountResponse)(nil), "pb.CountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TransportExample service

type TransportExampleClient interface {
	Uppercase(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UppercaseResponse, error)
	Count(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CountResponse, error)
}

type transportExampleClient struct {
	cc *grpc.ClientConn
}

func NewTransportExampleClient(cc *grpc.ClientConn) TransportExampleClient {
	return &transportExampleClient{cc}
}

func (c *transportExampleClient) Uppercase(ctx context.Context, in *Request, opts ...grpc.CallOption) (*UppercaseResponse, error) {
	out := new(UppercaseResponse)
	err := grpc.Invoke(ctx, "/pb.TransportExample/Uppercase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportExampleClient) Count(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/pb.TransportExample/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransportExample service

type TransportExampleServer interface {
	Uppercase(context.Context, *Request) (*UppercaseResponse, error)
	Count(context.Context, *Request) (*CountResponse, error)
}

func RegisterTransportExampleServer(s *grpc.Server, srv TransportExampleServer) {
	s.RegisterService(&_TransportExample_serviceDesc, srv)
}

func _TransportExample_Uppercase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportExampleServer).Uppercase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TransportExample/Uppercase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportExampleServer).Uppercase(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportExample_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportExampleServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TransportExample/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportExampleServer).Count(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransportExample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransportExample",
	HandlerType: (*TransportExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uppercase",
			Handler:    _TransportExample_Uppercase_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _TransportExample_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport-example.proto",
}

func init() { proto.RegisterFile("transport-example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x4d, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe7, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0xf5, 0xcc, 0x2b, 0x28, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0x70, 0x94, 0x6c, 0xb9, 0x04, 0x43, 0x0b, 0x0a, 0x52, 0x8b, 0x92, 0x13, 0x8b,
	0x53, 0x83, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xc4, 0xb8, 0xd8, 0xfc, 0x4b, 0x4b,
	0x10, 0x6a, 0xa1, 0x3c, 0x21, 0x01, 0x2e, 0x66, 0xd7, 0xa2, 0x22, 0x09, 0x26, 0xb0, 0x20, 0x88,
	0xa9, 0xa4, 0xce, 0xc5, 0xeb, 0x9c, 0x5f, 0x9a, 0x57, 0x82, 0x43, 0x2b, 0x33, 0x4c, 0xab, 0x51,
	0x01, 0x97, 0x40, 0x08, 0xcc, 0x9d, 0xae, 0x10, 0x67, 0x0a, 0x19, 0x72, 0x71, 0xc2, 0xed, 0x16,
	0xe2, 0xd6, 0x2b, 0x48, 0xd2, 0x83, 0xba, 0x55, 0x4a, 0x14, 0xc4, 0xc1, 0x70, 0x97, 0x12, 0x83,
	0x90, 0x26, 0x17, 0x2b, 0xd8, 0x3e, 0x54, 0xe5, 0x82, 0x20, 0x0e, 0x8a, 0x3b, 0x94, 0x18, 0x92,
	0xd8, 0xc0, 0xa1, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x99, 0xe9, 0xef, 0x86, 0x20, 0x01,
	0x00, 0x00,
}
